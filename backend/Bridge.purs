-- File auto generated by purescript-bridge! --
module Bridge where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)

import Prelude

newtype Cmd_Login =
    Cmd_Login {
      email :: String
    , password :: String
    , server :: String
    }

instance encodeJsonCmd_Login :: EncodeJson Cmd_Login where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonCmd_Login :: DecodeJson Cmd_Login where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericCmd_Login :: Generic Cmd_Login _
derive instance eqCmd_Login :: Eq Cmd_Login
derive instance ordCmd_Login :: Ord Cmd_Login

data Cmd =
    Init
  | Login Cmd_Login
  | NeedCiphersList
  | NeedsReset
  | SendMasterPassword String

instance encodeJsonCmd :: EncodeJson Cmd where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonCmd :: DecodeJson Cmd where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericCmd :: Generic Cmd _
derive instance eqCmd :: Eq Cmd
derive instance ordCmd :: Ord Cmd

newtype Sub_LoadCiphers =
    Sub_LoadCiphers {
      date :: String
    , name :: String
    }

instance encodeJsonSub_LoadCiphers :: EncodeJson Sub_LoadCiphers where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSub_LoadCiphers :: DecodeJson Sub_LoadCiphers where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSub_LoadCiphers :: Generic Sub_LoadCiphers _
derive instance eqSub_LoadCiphers :: Eq Sub_LoadCiphers
derive instance ordSub_LoadCiphers :: Ord Sub_LoadCiphers

newtype Sub_LoadCiphers_List =
    Sub_LoadCiphers_List (Array Sub_LoadCiphers)

instance encodeJsonSub_LoadCiphers_List :: EncodeJson Sub_LoadCiphers_List where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSub_LoadCiphers_List :: DecodeJson Sub_LoadCiphers_List where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSub_LoadCiphers_List :: Generic Sub_LoadCiphers_List _
derive instance eqSub_LoadCiphers_List :: Eq Sub_LoadCiphers_List
derive instance ordSub_LoadCiphers_List :: Ord Sub_LoadCiphers_List

newtype Sub_NeedsMasterPassword =
    Sub_NeedsMasterPassword {
      login :: String
    , server :: String
    }

instance encodeJsonSub_NeedsMasterPassword :: EncodeJson Sub_NeedsMasterPassword where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSub_NeedsMasterPassword :: DecodeJson Sub_NeedsMasterPassword where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSub_NeedsMasterPassword :: Generic Sub_NeedsMasterPassword _
derive instance eqSub_NeedsMasterPassword :: Eq Sub_NeedsMasterPassword
derive instance ordSub_NeedsMasterPassword :: Ord Sub_NeedsMasterPassword

data Sub =
    Error String
  | LoadCiphers Sub_LoadCiphers_List
  | LoginSuccessful
  | NeedsLogin
  | NeedsMasterPassword Sub_NeedsMasterPassword
  | Reset

instance encodeJsonSub :: EncodeJson Sub where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSub :: DecodeJson Sub where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSub :: Generic Sub _
derive instance eqSub :: Eq Sub
derive instance ordSub :: Ord Sub

